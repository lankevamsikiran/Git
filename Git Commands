git init  -->  Initializes a new Git repository. If you want to place a project under revision control, this is the first command you need to learn.

git status  -->  Displays the state of the working directory and the staged snapshot. You’ll want to run this in conjunction with git add and git commit to see exactly what’s being included in the next snapshot.

git add  -->  Moves changes from the working directory to the staging area. This gives you the opportunity to prepare a snapshot before committing it to the official history.

git branch  -->  This command is your general-purpose branch administration tool. It lets you create isolated development environments within a single repository.

git remote  -->  A convenient tool for administering remote connections. Instead of passing the full URL to the fetch, pull, and push commands, it lets you use a more meaningful shortcut.

git commit  -->  Takes the staged snapshot and commits it to the project history. Combined with git add, this defines the basic workflow for all Git users.

git push  -->  Pushing is the opposite of fetching (with a few caveats). It lets you move a local branch to another repository, which serves as a convenient way to publish contributions.

git pull  -->  Pulling is the automated version of git fetch. It downloads a branch from a remote repository, then immediately merges it into the current branch. This is the Git equivalent of svn update.

git merge  --> A powerful way to integrate changes from divergent branches. After forking the project history with git branch, git merge lets you put it back together again.

git rebase  --> Rebasing lets you move branches around, which helps you avoid unnecessary merge commits. The resulting linear history is often much easier to understand and explore.

git rebase -i  -->  The -i flag is used to begin an interactive rebasing session. This provides all the benefits of a normal rebase, but gives you the opportunity to add, edit, or delete commits along the way.

git reset  -->  Undoes changes to files in the working directory. Resetting lets you clean up or completely remove changes that have not been pushed to a public repository.

git revert  -->  Undoes a committed snapshot. When you discover a faulty commit, reverting is a safe and easy way to completely remove it from the code base.

git log  -->  Lets you explore the previous revisions of a project. It provides several formatting options for displaying committed snapshots.

git fetch  -->  git fetch downloads commits, files, and references from a remote repository into your local repository. It updates your remote-tracking branches (like origin/main) but not your local branches (like main)

git config  -->  A convenient way to set configuration options for your Git installation. You’ll typically only need to use this immediately after installing Git on a new development machine.

git clone  -->  Creates a copy of an existing Git repository. Cloning is the most common way for developers to obtain a working copy of a central repository.

git checkout  -->  In addition to checking out old commits and old file revisions, git checkout is also the means to navigate existing branches. Combined with the basic Git commands, it’s a way to work on a particular line of development.

git clean  -->  Removes untracked files from the working directory. This is the logical counterpart to git reset, which (typically) only operates on tracked files.

git stash  -->  The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy. 

git stash pop  -->  Popping your stash removes the changes from your stash and reapplies them to your working copy.

git stash apply  -->  You can reapply the changes to your working copy and keep them in your stash with git stash apply

git remote prune origin  -->  Removes references to remote branches that no longer exist on the remote.

git branch -r --> Display all the remote branches

git push --set-upstream origin branch_name --> The --set-upstream option links your local branch to a remote branch, simplifying future push and pull operations.

git remote show origin --> The git remote show origin command provides detailed information about the remote repository named origin. This includes details about the remote branches, their tracking status, and other relevant information.
